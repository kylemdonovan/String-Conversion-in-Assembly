Microsoft (R) Macro Assembler Version 14.29.30143.0	    06/04/22 01:09:28
6String Primitives and Macros       (Proj6Donovaky.asm	     Page 1 - 1


				TITLE  String Primitives and Macros       (Proj6Donovaky.asm)

				; Author: Kyle Donovan
				; Last Modified: 6/1/2022
				; OSU email address: donovaky@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 6/8/2022
				; Description:   Im going to use this program to take numbers and calc the average and stuff because why would i have a calculator

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;;prompt, input, max char entered, string character count
				mGetString MACRO prompt, userInput, maxCharEnt, strCharCount
					
					push		EDX
					push		ECX
					push		EBX ;this can be removed
					push		EAX

					mdisplayString	prompt

					mov			EDX, userInput   ;; 12?? --> this is the users input
					mov			ECX, maxCharEnt	;; this is the length of the users input

					call		ReadString

					mov			strCharCount, EAX

					pop			EAX
					pop			EBX ;this can be removed
					pop			ECX
					pop			EDX


				ENDM


				mDisplayString MACRO string
					push	EDX					;saves our EDX register
					mov		EDX, string
					call	WriteString
					pop		EDX					; restores our EDX register
				ENDM


 =-80000000			LO		= -2147483648
 = 7FFFFFFF			HI		= 2147483647
 = 00000015			MAX		= 21 ;; this is the max size i will accept from a string unless it needs to be 4x this
 = 0000000A			TEN		= 10 ;;this is how many numbers i will need to store

 00000000			.data
 00000000 53 74 72 69 6E	welcome_1	BYTE	"String Primitives and Macros! Programmed by Kyle Donovan", 0
	   67 20 50 72 69
	   6D 69 74 69 76
	   65 73 20 61 6E
	   64 20 4D 61 63
	   72 6F 73 21 20
	   50 72 6F 67 72
	   61 6D 6D 65 64
	   20 62 79 20 4B
	   79 6C 65 20 44
	   6F 6E 6F 76 61
	   6E 00
 00000039 50 6C 65 61 73	purpose_1	BYTE	"Please provide 10 signed decimal integers. Each number needs to be small enough to fit inside a 32 bit register.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 45 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   6E 65 65 64 73
	   20 74 6F 20 62
	   65 20 73 6D 61
	   6C 6C 20 65 6E
	   6F 75 67 68 20
	   74 6F 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 00
 000000AA 41 66 74 65 72	purpose_2	BYTE	"After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.", 0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 00
 00000127 50 6C 65 61 73	get_prompt	BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000147 45 52 52 4F 52	error		BYTE	"ERROR: You did not enter a signed number or your number was too big. ", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 20 00

 0000018D  0000000A [		usrArray	SDWORD	TEN DUP(?) ;;change to byte?
	    00000000
	   ]
 000001B5  00000015 [		userInput	BYTE	MAX DUP(?)
	    00
	   ]
 000001CA 00000000		byteCount	DWORD	?
 000001CE 50 6C 65 61 73	retry		BYTE	"Please try again. ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 20 00

 000001E1 41 6E 64 20 73	goodbye		BYTE	"And so marks our fateful end. Adeiu!", 0
	   6F 20 6D 61 72
	   6B 73 20 6F 75
	   72 20 66 61 74
	   65 66 75 6C 20
	   65 6E 64 2E 20
	   41 64 65 69 75
	   21 00
 00000206 77 6F 6F 6F 6F	party		BYTE	"woooooo",0
	   6F 6F 00
 0000020E 0000000A		num_count	DWORD	10
 00000212 54 68 69 73 20	negNum		BYTE	"This num is negative", 0
	   6E 75 6D 20 69
	   73 20 6E 65 67
	   61 74 69 76 65
	   00
 00000227 54 68 69 73 20	regularNum	BYTE	"This num is NOT negative", 0
	   6E 75 6D 20 69
	   73 20 4E 4F 54
	   20 6E 65 67 61
	   74 69 76 65 00

 00000240 00000000		AlStorage	DWORD	?
 00000244 54 68 69 73 20	positivity  BYTE	"This has aaa +", 0
	   68 61 73 20 61
	   61 61 20 2B 00


				; (insert variable definitions here)

 00000000			.code

				; ----------------------------------------------------------------------------------------------------------
				; Name: main
				;
				; Calls Randomize to start, then:
				; Calls the procedures in the order of: introduction, fillArray, displayList, displayMedian, countList, and farewell
				;
				; Preconditions: Proj5_Donovaky.asm is added to our Visual Studio project folder
				;
				; Postconditions: The program generates a random array, displays array, sorts array, calculates and displays median, displays sorted list, and displays counts of each number above 10
				;
				; Receives: 
				;		introduction	= introduce our program title, name, extra credits, and instructions for our user
				;		fillArray		= fills our array with random integers
				;		sortList		= orders our list from least to greatest
				;		exchangeElements= a subprocedure of sortList which exchanges the values if they are not in order
				;		displayMedian	= displays the median of our list
				;		displayList		= displays the list, whether sorted or unsorted or as a count measure
				;		countList		= counts the number of items that appear in our list
				;		farewell		= bids our user adieu
				;
				; Returns: none
				; ----------------------------------------------------------------------------------------------------------

 00000000			main PROC

					;; calls introduction which posts a welcome message to our user and explains the purpose of the program
 00000000  68 00000000 R		push	OFFSET welcome_1 ;; + x
 00000005  68 00000039 R		push	OFFSET purpose_1 ;; + x
 0000000A  68 000000AA R		push	OFFSET purpose_2 ;;+x
 0000000F  E8 00000038			call	introduction

 00000014  B9 0000000A			mov		ECX, TEN
 00000019  BF 0000018D R		mov		EDI, OFFSET usrArray

 0000001E			_UserArray:
					
 0000001E  68 000001CE R		push	OFFSET retry	;; 28
 00000023  68 00000147 R		push	OFFSET error	;; 24
 00000028  68 000001CA R		push	OFFSET byteCount ;;20
 0000002D  6A 15			push	OFFSET SIZEOF userInput ;;16
 0000002F  68 000001B5 R		push	OFFSET userInput		;;12
 00000034  68 00000127 R		push	OFFSET get_prompt ;;+8
 00000039  E8 00000053			call	ReadVal
					
 0000003E  89 07			mov		[EDI], EAX
 00000040  83 C7 04			add		EDI, 4
 00000043  E2 D9			loop	_UserArray

					;; we get the number as a string from the user
					;push	OFFSET get_prompt
					;call	mGetString


					;; displays goodbye message
					;push	OFFSET goodbye
					;call	farewell


					Invoke ExitProcess,0	; exit to operating system
 00000045  6A 00	   *	    push   +000000000h
 00000047  E8 00000000 E   *	    call   ExitProcess
 0000004C			main ENDP

				; ----------------------------------------------------------------------------------------------------------
				; Name: introduction
				; 
				; ; Introduces the user to our program, explains what our program does
				;
				; Preconditions: None
				;
				; Postconditions: changes register EDX
				;
				; Receives: 
				;
				; Returns: None
				; ----------------------------------------------------------------------------------------------------------

 0000004C			introduction PROC

 0000004C  55				push	EBP
 0000004D  8B EC			mov		EBP,ESP
 0000004F  52				push	EDX
					
 00000050  E8 00000000 E		call	CrLf
					;;string which communicates who we are and program title
					mDisplayString [EBP+16]
 00000055  52		     1		push	EDX					
 00000056  8B 55 10	     1		mov		EDX, [EBP+16]
 00000059  E8 00000000 E     1		call	WriteString
 0000005E  5A		     1		pop		EDX					
 0000005F  E8 00000000 E		call	CrLf
 00000064  E8 00000000 E		call	CrLf
					;; welcome user string (1 of 2)
					mDisplayString [EBP+12]
 00000069  52		     1		push	EDX					
 0000006A  8B 55 0C	     1		mov		EDX, [EBP+12]
 0000006D  E8 00000000 E     1		call	WriteString
 00000072  5A		     1		pop		EDX					
 00000073  E8 00000000 E		call	CrLf
					mDisplayString [EBP+8]	;; welcome user string (2 of 2)
 00000078  52		     1		push	EDX					
 00000079  8B 55 08	     1		mov		EDX, [EBP+8]
 0000007C  E8 00000000 E     1		call	WriteString
 00000081  5A		     1		pop		EDX					
 00000082  E8 00000000 E		call	CrLf
 00000087  E8 00000000 E		call	CrLf
 0000008C  5A				pop		EDX
 0000008D  5D				pop		EBP
 0000008E  C2 000C			ret		12

 00000091			introduction ENDP

 00000091			ReadVal PROC
 00000091  55				push	EBP
 00000092  8B EC			mov		EBP, ESP
 00000094  50				push	EAX
 00000095  53				push	EBX
 00000096  51				push	ECX
 00000097  52				push	EDX
					;push	EDI
 00000098  56				push	ESI

 00000099			_ReadValChkPt:
					;;prompt, input, max char entered, string char count
					mGetString	[EBP+8], [EBP+12], [EBP+16], [EBP+20]
 00000099  52		     1		push		EDX
 0000009A  51		     1		push		ECX
 0000009B  53		     1		push		EBX 
 0000009C  50		     1		push		EAX
 0000009D  52		     2		push	EDX					
 0000009E  8B 55 08	     2		mov		EDX, [EBP+8]
 000000A1  E8 00000000 E     2		call	WriteString
 000000A6  5A		     2		pop		EDX					
 000000A7  8B 55 0C	     1		mov			EDX, [EBP+12]   
 000000AA  8B 4D 10	     1		mov			ECX, [EBP+16]	
 000000AD  E8 00000000 E     1		call		ReadString
 000000B2  89 45 14	     1		mov			[EBP+20], EAX
 000000B5  58		     1		pop			EAX
 000000B6  5B		     1		pop			EBX 
 000000B7  59		     1		pop			ECX
 000000B8  5A		     1		pop			EDX

 000000B9  8B 75 0C			mov		ESI, [EBP+12]
 000000BC  8B 5D 14			mov		EBX, [EBP+20]

 000000BF  83 FB 0B			cmp		EBX, 11
 000000C2  7F 02			jg		_Error
 000000C4  EB 1B			jmp		_Checker

 000000C6			_Error:
				;; this is the please try again message
					mDisplayString [EBP+24]
 000000C6  52		     1		push	EDX					
 000000C7  8B 55 18	     1		mov		EDX, [EBP+24]
 000000CA  E8 00000000 E     1		call	WriteString
 000000CF  5A		     1		pop		EDX					
 000000D0  E8 00000000 E		call	CrLf
					mDisplayString [EBP+28]
 000000D5  52		     1		push	EDX					
 000000D6  8B 55 1C	     1		mov		EDX, [EBP+28]
 000000D9  E8 00000000 E     1		call	WriteString
 000000DE  5A		     1		pop		EDX					
 000000DF  EB B8			jmp		_ReadValChkPt
					;; prompt, input, max char entered, string char count

 000000E1			_Checker:	
					;; i want to use this spot to check EACH value of my string

 000000E1  FC				cld

 000000E2  AC				lodsb	
					
					;; need to convert substring to ASCII?

 000000E3  3C 2D			cmp		AL, 45
 000000E5  74 13			je		_NegativeZone
 000000E7  3C 2B			cmp		AL, 43
 000000E9  74 17			je		_ExplicitlyPositive
 000000EB  75 00			jne		_TheOtherTestingZone

					;;; check if its a number-  if it is a number its all good code continues
					;;; if its a negative, we need to send it somewhere else - probably also needs one for +
					;;; if its not a number and not negative, send it back to _Error



 000000ED			_TheOtherTestingZone: ;;;this tests the number
					;mov		EDX, OFFSET regularNum
					;call	WriteString
					;;check if first val is a number
 000000ED  AC				lodsb
 000000EE  3C 30			cmp		AL,48
 000000F0  7C D4			jl		_Error ;; if below 1 range, error
 000000F2  3C 39			cmp		AL, 57
 000000F4  7F D0			jg		_Error	;; if above 0 range, error
					
					;;basically this should decrease our false loop as we check each value
					;; so we need to store our value of the size into a var and decrement it


					;dec		EBX we can decrement in the number converter 
					;; this should probbaly jump to the conversion, which should jump back to TheOtherTestingZone
					;;jg		_TheOtherTestingZone

					;;push	ECX
 000000F6  7F F5			jg		_TheOtherTestingZone

 000000F8  EB 0B			jmp		_End

 000000FA			_NegativeZone: 
					;mov		EDX, OFFSET negNum
					;call	WriteString
 000000FA  BA 00000001			mov		EDX, 1
 000000FF  4B				dec		EBX
 00000100  EB EB			jmp		_TheOtherTestingZone

				;;check if second fval is a number

				;_TheItIsANumberZone:

 00000102			_ExplicitlyPositive:
 00000102  4B				dec		EBX
					;mov		EDX, OFFSET positivity
					;call	WriteString
 00000103  EB E8			jmp		_TheOtherTestingZone


				;_setNeg:
					;; neg ##whatever our number string is
				;	jmp		_EndChkPt

 00000105			_End:
				;	cmp		EDX, 1
				;	je		_setNeg

 00000105			_EndChkPt:

 00000105  5E				pop		ESI
					;pop		EDI
 00000106  5A				pop		EDX
 00000107  59				pop		ECX
 00000108  5B				pop		EBX
 00000109  58				pop		EAX
 0000010A  5D				pop		EBP
 0000010B  C2 0018			ret		24

 0000010E			ReadVal ENDP


 0000010E			farewell PROC
 0000010E  55				push	EBP
 0000010F  8B EC			mov		EBP, ESP

 00000111  8B 55 08			mov		EDX, [EBP+8]
 00000114  E8 00000000 E		call	WriteString
 00000119  E8 00000000 E		call	CrLf

 0000011E  5D				pop		EBP
 0000011F  C2 0004			ret		4

 00000122			farewell ENDP



				END main



					;;this should be user input
				;	mov		ESI, [EBP+12]

					;;this should be the size of the user input but it isnt actually its 10 i think
				;	mov		EBX, [EBP+16]

				;	cmp		EBX, 11
				;	jg		_Error

				;	jmp		_End


				;_Error:
					;; this is the error message
				;	mDisplayString [EBP+24]
				;	call	CrLf
					;; this is the please try again message
				;	mDisplayString [EBP+28]
				;	call	CrLf

					;; prompt, input, max char entered, string char count
				;	mGetString	[EBP+8], [EBP+12], [EBP+16], [EBP+20]


				;_End:
				;	mDisplayString [EBP+32]


				;_Conversion:
					;;; i have my number is AL = > i want to convert this number into an int because my number is a string
					;;; for how many numbers are in this, i should convert for that many times. 

					;; conversion time!!!
					;; numInt = 10 * numInt + (numChar-48)


					;; push ECX

				;	imul	ECX, 10
				;	mov		ECX, EAX
					
				;	push	EAX

				;	sub		AL, 48

					;; the ECX should be the places, the EAX should be the AL sub 48 = INT
				;	add		ECX, EAX

					;;;need to get imul 10,ECX to be 0, 1, 10, 100, ETC

				;	cmp		ECX, 1
				;	jl		_IncECX

				;	pop		EAX

				;	jmp		_TheOtherTestingZone
					;;if ecx == 1:
					;; jump to inc ecx land

				;_IncECX:
					
				;	inc		ECX ;;dk bout this
				;	jmp		_TheOtherTestingZone
Microsoft (R) Macro Assembler Version 14.29.30143.0	    06/04/22 01:09:28
6String Primitives and Macros       (Proj6Donovaky.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000253 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000122 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000091 _TEXT	Length= 0000007D Public STDCALL
  _ReadValChkPt  . . . . . . . .	L Near	 00000099 _TEXT	
  _Error . . . . . . . . . . . .	L Near	 000000C6 _TEXT	
  _Checker . . . . . . . . . . .	L Near	 000000E1 _TEXT	
  _TheOtherTestingZone . . . . .	L Near	 000000ED _TEXT	
  _NegativeZone  . . . . . . . .	L Near	 000000FA _TEXT	
  _ExplicitlyPositive  . . . . .	L Near	 00000102 _TEXT	
  _End . . . . . . . . . . . . .	L Near	 00000105 _TEXT	
  _EndChkPt  . . . . . . . . . .	L Near	 00000105 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 0000010E _TEXT	Length= 00000014 Public STDCALL
introduction . . . . . . . . . .	P Near	 0000004C _TEXT	Length= 00000045 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
  _UserArray . . . . . . . . . .	L Near	 0000001E _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AlStorage  . . . . . . . . . . .	DWord	 00000240 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 -80000000h   
MAX  . . . . . . . . . . . . . .	Number	 00000015h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEN  . . . . . . . . . . . . . .	Number	 0000000Ah   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 000001CA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 00000147 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
get_prompt . . . . . . . . . . .	Byte	 00000127 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000001E1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
negNum . . . . . . . . . . . . .	Byte	 00000212 _DATA	
num_count  . . . . . . . . . . .	DWord	 0000020E _DATA	
party  . . . . . . . . . . . . .	Byte	 00000206 _DATA	
positivity . . . . . . . . . . .	Byte	 00000244 _DATA	
purpose_1  . . . . . . . . . . .	Byte	 00000039 _DATA	
purpose_2  . . . . . . . . . . .	Byte	 000000AA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
regularNum . . . . . . . . . . .	Byte	 00000227 _DATA	
retry  . . . . . . . . . . . . .	Byte	 000001CE _DATA	
userInput  . . . . . . . . . . .	Byte	 000001B5 _DATA	
usrArray . . . . . . . . . . . .	DWord	 0000018D _DATA	
welcome_1  . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
