Microsoft (R) Macro Assembler Version 14.29.30143.0	    06/06/22 23:22:21
6String Primitives and Macros       (Proj6Donovaky.asm	     Page 1 - 1


				TITLE  String Primitives and Macros       (Proj6Donovaky.asm)

				; Author: Kyle Donovan
				; Last Modified: 6/5/2022
				; OSU email address: donovaky@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 6/5/2022
				; Description:   Program which converts strings to integers 
				;	via ASCII and then returns them to a string and displays them
				;	and calculates and returns the sum of the numbers and the truncated average
				;	also includes the running sum from extra credit 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;;prompt, input, max char entered, string character count
				mGetString MACRO prompt, userInput, maxCharEnt, strCharCount
					
					push		EDX
					push		ECX
					push		EBX				 ;this can be removed but i wont because it works. next time I popad though
					push		EAX

					mdisplayString	prompt

					mov			EDX, userInput   ;; 12?? --> this is the users input
					mov			ECX, maxCharEnt	 ;; this is the length of the users input

					call		ReadString

					mov			strCharCount, EAX

					pop			EAX
					pop			EBX				;this can be removed but I wont because see above
					pop			ECX
					pop			EDX


				ENDM


				mDisplayString MACRO string
					push	EDX					;saves our EDX register
					mov		EDX, string
					call	WriteString
					pop		EDX					; restores our EDX register
				ENDM


 =-80000000			LO		= -2147483648
 = 7FFFFFFF			HI		= 2147483647
 = 00000015			MAX		= 21					;; i dont remember if i need this so here it stays
 = 0000000A			TEN		= 10					;;this is how many numbers i will need to store

 00000000			.data
 00000000 53 74 72 69 6E	welcome_1	BYTE	"String Primitives and Macros! Programmed by Kyle Donovan", 0
	   67 20 50 72 69
	   6D 69 74 69 76
	   65 73 20 61 6E
	   64 20 4D 61 63
	   72 6F 73 21 20
	   50 72 6F 67 72
	   61 6D 6D 65 64
	   20 62 79 20 4B
	   79 6C 65 20 44
	   6F 6E 6F 76 61
	   6E 00
 00000039 50 6C 65 61 73	purpose_1	BYTE	"Please provide 10 signed decimal integers. Each number needs to be small enough to fit inside a 32 bit register.", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 45 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   6E 65 65 64 73
	   20 74 6F 20 62
	   65 20 73 6D 61
	   6C 6C 20 65 6E
	   6F 75 67 68 20
	   74 6F 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 00
 000000AA 41 66 74 65 72	purpose_2	BYTE	"After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.", 0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 00
 00000127 50 6C 65 61 73	get_prompt	BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000147 45 52 52 4F 52	error		BYTE	"ERROR: You did not enter a signed number or your number was too big. ", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 20 00
 0000018D 45 78 74 72 61	extra1		BYTE	"Extra Credit: 1 - I print the numbers the user inputted as a running sum. "
	   20 43 72 65 64
	   69 74 3A 20 31
	   20 2D 20 49 20
	   70 72 69 6E 74
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 74 68
	   65 20 75 73 65
	   72 20 69 6E 70
	   75 74 74 65 64
	   20 61 73 20 61
	   20 72 75 6E 6E
	   69 6E 67 20 73
	   75 6D 2E 20

 000001D7  0000000A [		usrArray	SDWORD	TEN DUP(?) 
	    00000000
	   ]
 000001FF  00000015 [		userInput	BYTE	MAX DUP(0)
	    00
	   ]

 00000214  00000001 [		addNum		SDWORD	1 DUP(?)
	    00000000
	   ]

 00000218 00000000		byteCount	DWORD	?
 0000021C 50 6C 65 61 73	retry		BYTE	"Please try again. ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 20 00


 0000022F 41 6E 64 20 73	goodbye		BYTE	"And so marks our fateful end. Adeiu!", 0
	   6F 20 6D 61 72
	   6B 73 20 6F 75
	   72 20 66 61 74
	   65 66 75 6C 20
	   65 6E 64 2E 20
	   41 64 65 69 75
	   21 00
 00000254 48 65 72 65 20	strDisplay	BYTE	"Here are your numbers: ", 0
	   61 72 65 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   73 3A 20 00
 0000026C 59 6F 75 72 20	truncAvg	BYTE	"Your truncated average is: ", 0
	   74 72 75 6E 63
	   61 74 65 64 20
	   61 76 65 72 61
	   67 65 20 69 73
	   3A 20 00
 00000288 54 68 65 20 73	summa		BYTE	"The sum is: ", 0
	   75 6D 20 69 73
	   3A 20 00
 00000295 00000000		runningSum	SDWORD	0
 00000299 59 6F 75 72 20	currentSum	BYTE	"Your running sum is: ", 0
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   6D 20 69 73 3A
	   20 00

 000002AF 0000000A		num_count	DWORD	10

 000002B3  0000000B [		stringHold  BYTE	11 DUP(?)	
	    00
	   ]

 000002BE 00000000		AlStorage	DWORD	?

 000002C2 2C 20 00		spaceComma	BYTE	", ", 0
 000002C5 00000000		numStore	SDWORD	?

 000002C9 00000000		theSum		SDWORD	?
 000002CD 00000000		trunc8dAvg	SDWORD	?

 000002D1 00000000		counterino	DWORD	?


 00000000			.code

				; ----------------------------------------------------------------------------------------------------------
				; Name: main
				;
				; Calls the procedures in the order of: introduction, readVal, writeVal, 
				;
				; Preconditions: Proj6_Donovaky.asm is added to our Visual Studio project folder
				;
				; Postconditions: Converts, displays some numbers that the user put in
				;
				; Receives: 
				;		
				;		readVal			= reads the input from our user 
				;		writeVal		= writes the values after conversion
				;
				; Returns: a converted integer
				; ----------------------------------------------------------------------------------------------------------

 00000000			main PROC
					
					;; calls introduction which posts a welcome message 
					;;to our user and explains the purpose of the program
					mDisplayString OFFSET welcome_1
 00000000  52		     1		push	EDX					
 00000001  BA 00000000 R     1		mov		EDX, OFFSET welcome_1
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		EDX					
 0000000C  E8 00000000 E		call	CrLf
					mDisplayString OFFSET purpose_1
 00000011  52		     1		push	EDX					
 00000012  BA 00000039 R     1		mov		EDX, OFFSET purpose_1
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		EDX					
 0000001D  E8 00000000 E		call	CrLf
					mDisplayString OFFSET purpose_2
 00000022  52		     1		push	EDX					
 00000023  BA 000000AA R     1		mov		EDX, OFFSET purpose_2
 00000028  E8 00000000 E     1		call	WriteString
 0000002D  5A		     1		pop		EDX					
 0000002E  E8 00000000 E		call	CrLf
					mDisplayString OFFSET extra1
 00000033  52		     1		push	EDX					
 00000034  BA 0000018D R     1		mov		EDX, OFFSET extra1
 00000039  E8 00000000 E     1		call	WriteString
 0000003E  5A		     1		pop		EDX					
 0000003F  E8 00000000 E		call	CrLf

 00000044  B9 0000000A			mov		ECX, TEN
 00000049  BF 000001D7 R		mov		EDI, OFFSET usrArray

 0000004E			_UserArray:
					
 0000004E  68 000002C5 R		push	OFFSET numStore			;; 32
 00000053  68 0000021C R		push	OFFSET retry			;; 28
 00000058  68 00000147 R		push	OFFSET error			;; 24
 0000005D  68 00000218 R		push	OFFSET byteCount		;; 20
 00000062  6A 15			push	SIZEOF userInput		;; 16
 00000064  68 000001FF R		push	OFFSET userInput		;; 12
 00000069  68 00000127 R		push	OFFSET get_prompt		;; +8
 0000006E  E8 000000F2			call	ReadVal
					

					mDisplayString	OFFSET currentSum
 00000073  52		     1		push	EDX					
 00000074  BA 00000299 R     1		mov		EDX, OFFSET currentSum
 00000079  E8 00000000 E     1		call	WriteString
 0000007E  5A		     1		pop		EDX					

 0000007F  8B 15 000002C5 R		mov		EDX, numStore
 00000085  89 17			mov		[EDI], EDX
 00000087  01 15 00000295 R		add		runningSum, EDX
 0000008D  FF 35 00000295 R		push	runningSum
 00000093  E8 000001A8			call	WriteVal

 00000098  E8 00000000 E		call	CrLf
					
 0000009D  83 C7 04			add		EDI, 4
 000000A0  E2 AC			loop	_UserArray


					;; we get the number as a string from the user
					;push	OFFSET get_prompt
					;call	mGetString
 000000A2  E8 00000000 E		call	CrLf
					mDisplayString OFFSET strDisplay
 000000A7  52		     1		push	EDX					
 000000A8  BA 00000254 R     1		mov		EDX, OFFSET strDisplay
 000000AD  E8 00000000 E     1		call	WriteString
 000000B2  5A		     1		pop		EDX					

 000000B3  B9 0000000A			mov		ECX, TEN ;;restore my loop value
 000000B8  BB 00000000			mov		EBX, 0
 000000BD  BE 000001D7 R		mov		ESI, OFFSET usrArray

					
 000000C2			_Writing:
					
 000000C2  8B 06			mov		EAX, [ESI]
 000000C4  03 D8			add		EBX, EAX	


 000000C6  68 000002B3 R		push	OFFSET stringHold ;;12
 000000CB  50				push	EAX				  ;;8

 000000CC  E8 0000016F			call	WriteVal

 000000D1  83 C6 04			add		ESI, 4
 000000D4  83 F9 01			cmp		ECX, 1
 000000D7  74 0C			je		_ImGonnaJump
					mDisplayString OFFSET spaceComma
 000000D9  52		     1		push	EDX					
 000000DA  BA 000002C2 R     1		mov		EDX, OFFSET spaceComma
 000000DF  E8 00000000 E     1		call	WriteString
 000000E4  5A		     1		pop		EDX					

 000000E5			_ImGonnaJump:
 000000E5  E2 DB			loop	_Writing


 000000E7			_SummaMain:	
					;; sums the nums
 000000E7  8B C3			mov		EAX, EBX

 000000E9  E8 00000000 E		call	CrLF
 000000EE  E8 00000000 E		call	CrLF

 000000F3  89 1D 000002C9 R		mov		theSum, EBX
 000000F9  68 00000288 R		push	OFFSET summa
					mDisplayString OFFSET summa
 000000FE  52		     1		push	EDX					
 000000FF  BA 00000288 R     1		mov		EDX, OFFSET summa
 00000104  E8 00000000 E     1		call	WriteString
 00000109  5A		     1		pop		EDX					
 0000010A  FF 35 000002C9 R		push	theSum
 00000110  E8 0000012B			call	WriteVal


 00000115  BB 0000000A			mov		EBX, TEN
 0000011A  99				cdq
 0000011B  F7 FB			idiv	EBX

 0000011D  A3 000002CD R		mov		trunc8dAvg, EAX		;;trun8dAvg stores my truncated average but more efficiently

 00000122  E8 00000000 E		call	CrLf
 00000127  E8 00000000 E		call	CrLf


 0000012C  68 0000026C R		push	OFFSET truncAvg
					mDisplayString OFFSET truncAvg
 00000131  52		     1		push	EDX					
 00000132  BA 0000026C R     1		mov		EDX, OFFSET truncAvg
 00000137  E8 00000000 E     1		call	WriteString
 0000013C  5A		     1		pop		EDX					
 0000013D  FF 35 000002CD R		push	trunc8dAvg
 00000143  E8 000000F8			call	WriteVal


 00000148  E8 00000000 E		call	CrLf
 0000014D  E8 00000000 E		call	CrLf
					mDisplayString OFFSET goodbye
 00000152  52		     1		push	EDX					
 00000153  BA 0000022F R     1		mov		EDX, OFFSET goodbye
 00000158  E8 00000000 E     1		call	WriteString
 0000015D  5A		     1		pop		EDX					

					Invoke ExitProcess,0	; exit to operating system
 0000015E  6A 00	   *	    push   +000000000h
 00000160  E8 00000000 E   *	    call   ExitProcess
 00000165			main ENDP


				; ----------------------------------------------------------------------------------------------------------
				; Name: readVal PROC
				; 
				; readVal converts our users inputted string into an int
				;
				; Pre-Condtions: User must enter a number (it does not necessarily need to be valid, but to be converted it does)
				;
				; Post-Conditions:  returns a converted int 
				;
				; Receives: [EBP+32]		= numStore, a variable to store the number so we can place it in our array later
				;			[EBP+28]		= retry, an encouraging message for our user to try again
				;			[EBP+24]		= error, an error message string which is displayed if our user violates our number bounds
				;			[EBP+20]		= byteCount, a count of our user's bytes
				;			[EBP+16]		= SIZEOF userInput, the size of our user's input in bytes
				;			[EBP+12]		= user_input, a string we receive from our user's input value
				;			[EBP+8]			= get_prompt, a string which displays a request for our user to enter a number
				;
				; Returns: returns a converted int in the bounds of our defined parameters
				; ----------------------------------------------------------------------------------------------------------

 00000165			ReadVal PROC
					LOCAL negativeTrue: DWORD
					LOCAL storeVar: DWORD

 00000165  55		   *	    push   ebp
 00000166  8B EC	   *	    mov    ebp, esp
 00000168  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000016B  57				push	EDI
 0000016C  60				pushad

 0000016D  56				push	ESI
 0000016E  B8 00000000			mov		EAX, 0 ;;our numInt is set to zero

 00000173  C7 45 FC			mov		negativeTrue, 0
	   00000000

 0000017A			_ReadValChkPt:
					;;prompt, input, max char entered, string char count
					mGetString	[EBP+8], [EBP+12], [EBP+16], [EBP+20]
 0000017A  52		     1		push		EDX
 0000017B  51		     1		push		ECX
 0000017C  53		     1		push		EBX				 
 0000017D  50		     1		push		EAX
 0000017E  52		     2		push	EDX					
 0000017F  8B 55 08	     2		mov		EDX, [EBP+8]
 00000182  E8 00000000 E     2		call	WriteString
 00000187  5A		     2		pop		EDX					
 00000188  8B 55 0C	     1		mov			EDX, [EBP+12]   
 0000018B  8B 4D 10	     1		mov			ECX, [EBP+16]	 
 0000018E  E8 00000000 E     1		call		ReadString
 00000193  89 45 14	     1		mov			[EBP+20], EAX
 00000196  58		     1		pop			EAX
 00000197  5B		     1		pop			EBX				
 00000198  59		     1		pop			ECX
 00000199  5A		     1		pop			EDX
 0000019A  8B 75 0C			mov		ESI, [EBP+12]
 0000019D  BB 00000000			mov		EBX, 0
 000001A2  B9 00000000			mov		ECX, 0
 000001A7  BA 00000000			mov		EDX, 0
 000001AC  8B 5D 14			mov		EBX, [EBP+20]
 000001AF  FC				cld
 000001B0  83 FB 0B			cmp		EBX, 11
 000001B3  7F 08			jg		_Error
 000001B5  8B 5D 0C			mov		EBX,[EBP+12]

 000001B8  8B 5D 14			mov		EBX, [EBP+20]
 000001BB  EB 1B			jmp		_SignChecker

 000001BD			_Error:
				;; this is the please try again message
					mDisplayString [EBP+24]
 000001BD  52		     1		push	EDX					
 000001BE  8B 55 18	     1		mov		EDX, [EBP+24]
 000001C1  E8 00000000 E     1		call	WriteString
 000001C6  5A		     1		pop		EDX					
 000001C7  E8 00000000 E		call	CrLf
					mDisplayString [EBP+28]
 000001CC  52		     1		push	EDX					
 000001CD  8B 55 1C	     1		mov		EDX, [EBP+28]
 000001D0  E8 00000000 E     1		call	WriteString
 000001D5  5A		     1		pop		EDX					
 000001D6  EB A2			jmp		_ReadValChkPt
					;; prompt, input, max char entered, string char count

 000001D8			_SignChecker:	
					;; i want to use this spot to check EACH value of my string
					
					;; need to convert substring to ASCII?
 000001D8  AC				lodsb
 000001D9  3C 2D			cmp		AL, 45
 000001DB  74 31			je		_NegativeZone
 000001DD  3C 2B			cmp		AL, 43
 000001DF  74 38			je		_ExplicitlyPositive


 000001E1  83 FB 00			cmp		EBX, 0
 000001E4  75 00			jne		_NumberChecker

 000001E6			_NumberChecker:
 000001E6  3C 30			cmp		AL,48
 000001E8  7C D3			jl		_Error ;; if below 1 range, error
 000001EA  3C 39			cmp		AL, 57
 000001EC  7F CF			jg		_Error	;; if above 0 range, error
					

 000001EE  2C 30			sub		AL, 48 ;;this is needed for accuracy/conversion

 000001F0  4B				dec		EBX
 000001F1  83 FB 00			cmp		EBX, 0

 000001F4  EB 0A			jmp		_Conversion
 000001F6  EB 36			jmp		_End

 000001F8			_ReloadCheckpoint:
 000001F8  AC				lodsb
 000001F9  83 FB 00			cmp		EBX, 0
 000001FC  75 E8			jne		_NumberChecker
 000001FE  EB 2E			jmp		_End
					;;; check if its a number-  if it is a number its all good code continues
					;;; if its a negative, we need to send it somewhere else - probably also needs one for +
					;;; if its not a number and not negative, send it back to _Error

 00000200			_Conversion:
 00000200  6B D2 0A			imul	EDX, 10 ;;this is the 10 * EAX part

 00000203  70 B8			jo		_Error


 00000205  0F B6 C8			movzx	ECX, AL
 00000208  03 D1			add		EDX, ECX

 0000020A  70 B1			jo		_Error
 0000020C  EB EA			jmp		_ReloadCheckPoint

 0000020E			_NegativeZone: 

 0000020E  AC				lodsb
 0000020F  C7 45 FC			mov		negativeTrue, 1
	   00000001

 00000216  4B				dec		EBX
 00000217  EB CD			jmp		_NumberChecker


 00000219			_ExplicitlyPositive:
 00000219  4B				dec		EBX
 0000021A  AC				lodsb
					;mov		EDX, OFFSET positivity
					;call	WriteString
 0000021B  EB C9			jmp		_NumberChecker


 0000021D			_setNeg:
 0000021D  F7 DA			neg		EDX
 0000021F  81 FA 80000000		cmp		EDX, LO
 00000225  7C 96			jl		_Error
 00000227  8B 45 20			mov		EAX,[EBP+32]
 0000022A  89 10			mov		[EAX], EDX

 0000022C  EB 0B			jmp		_NegativeEnd

 0000022E			_End: ;;this basically checks if user input was negative
 0000022E  83 7D FC 01			cmp		negativeTrue, 1
 00000232  74 E9			je		_setNeg

 00000234			_EndChkPt:
					;;;this is where we push the eDX value into our array

 00000234  8B 45 20			mov		EAX, [EBP+32]
 00000237  89 10			mov		[EAX], EDX

 00000239			_NegativeEnd:
					;;pop stack
 00000239  5E				pop		ESI
 0000023A  61				popad
 0000023B  5F				pop		EDI
 0000023C  C9		   *	    leave  
 0000023D  C2 0018			ret		24

 00000240			ReadVal ENDP
Proj6Donovaky.asm(373) : warning A6004:procedure argument or local not referenced : storeVar


				; ----------------------------------------------------------------------------------------------------------
				; Name: writeVal PROC
				; 
				; writeVal procedure to turn our converted integers into hexadecimal/ASCII
				;
				; Pre-Condtions: Only works if the user has entered 10 acceptable values.
				;
				; Post-Conditions: Nothing is changed
				;	Don't read the following line if you don't have a sense of humor, (its just a pun for fun) 
				;	I'm pushing and I'm popping a cap in your class.  
				;
				; Receives: [EBP+12]	= strinHold - a way to store the string
				;			[EBP+8]     = my converted value from my usrArray - its an individual value
				;
				; Returns: displays an ASCIII'd value (the 3 Is are not a typo, its how we ASCIII the final value)
				; ----------------------------------------------------------------------------------------------------------

 00000240			WriteVal PROC
					LOCAL	negativeTrue: DWORD
 00000240  55		   *	    push   ebp
 00000241  8B EC	   *	    mov    ebp, esp
 00000243  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000246  60				pushad	
 00000247  C7 45 FC			mov		negativeTrue, 0
	   00000000
 0000024E  B9 00000000			mov		ECX, 0
					
 00000253  8B 7D 0C			mov		EDI, [EBP+12]		;; string holder
 00000256  8B 45 08			mov		EAX, [EBP+8]		;; converted value
 00000259  83 F8 00			cmp		EAX, 0
 0000025C  7C 02			jl		_negativeMaker		;;checks if our number is negative
 0000025E  EB 09			jmp		_divisionLoop

 00000260			_negativeMaker:
 00000260  F7 D8			neg		EAX
 00000262  C7 45 FC			mov		negativeTrue, 1
	   00000001
											

 00000269			_divisionLoop:
 00000269  BA 00000000			mov		EDX, 0
 0000026E  BB 0000000A			mov		EBX, 10
 00000273  F7 F3			div		EBX					;;;switched from idiv to div so no cdq
					
 00000275  83 F8 00			cmp		EAX, 0
 00000278  74 07			je		_Asciiinator
 0000027A  83 C2 30			add		EDX, 48
 0000027D  52				push	EDX					;;preserves our register
 0000027E  41				inc		ECX
 0000027F  EB E8			jmp		_divisionLoop

 00000281			_Asciiinator:

 00000281  83 C2 30			add		EDX, 48					;;this converts our final value of the number
 00000284  52				push	EDX
 00000285  41				inc		ECX

 00000286  83 7D FC 00			cmp		negativeTrue, 0
					
 0000028A  7F 02			jg		_Negator
 0000028C  74 07			je		_pushString

 0000028E			_Negator:
 0000028E  B0 2D			mov AL, 45
 00000290  E8 00000000 E		call	WriteChar

 00000295			_pushString:
													;;adds the ascii values into the string
 00000295  58				pop		EAX
 00000296  AA				stosb

 00000297  E2 FC			loop	_pushString


 00000299			_FirstEnd:
 00000299  33 C0			xor		EAX, EAX				;;i've been told xor is a valuable tool in exploits
 0000029B  AA				stosb

					mDisplayString [EBP+12]
 0000029C  52		     1		push	EDX					
 0000029D  8B 55 0C	     1		mov		EDX, [EBP+12]
 000002A0  E8 00000000 E     1		call	WriteString
 000002A5  5A		     1		pop		EDX					

 000002A6			_SecondEnd:
					
 000002A6  C7 45 FC			mov		negativeTrue, 0
	   00000000
 000002AD  61				popad

 000002AE  C9		   *	    leave  
 000002AF  C2 0008			ret		8


 000002B2			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30143.0	    06/06/22 23:22:21
6String Primitives and Macros       (Proj6Donovaky.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002B2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000165 _TEXT	Length= 000000DB Public STDCALL
  negativeTrue . . . . . . . . .	DWord	 bp - 00000004
  storeVar . . . . . . . . . . .	DWord	 bp - 00000008
  _ReadValChkPt  . . . . . . . .	L Near	 0000017A _TEXT	
  _Error . . . . . . . . . . . .	L Near	 000001BD _TEXT	
  _SignChecker . . . . . . . . .	L Near	 000001D8 _TEXT	
  _NumberChecker . . . . . . . .	L Near	 000001E6 _TEXT	
  _ReloadCheckpoint  . . . . . .	L Near	 000001F8 _TEXT	
  _Conversion  . . . . . . . . .	L Near	 00000200 _TEXT	
  _NegativeZone  . . . . . . . .	L Near	 0000020E _TEXT	
  _ExplicitlyPositive  . . . . .	L Near	 00000219 _TEXT	
  _setNeg  . . . . . . . . . . .	L Near	 0000021D _TEXT	
  _End . . . . . . . . . . . . .	L Near	 0000022E _TEXT	
  _EndChkPt  . . . . . . . . . .	L Near	 00000234 _TEXT	
  _NegativeEnd . . . . . . . . .	L Near	 00000239 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000240 _TEXT	Length= 00000072 Public STDCALL
  negativeTrue . . . . . . . . .	DWord	 bp - 00000004
  _negativeMaker . . . . . . . .	L Near	 00000260 _TEXT	
  _divisionLoop  . . . . . . . .	L Near	 00000269 _TEXT	
  _Asciiinator . . . . . . . . .	L Near	 00000281 _TEXT	
  _Negator . . . . . . . . . . .	L Near	 0000028E _TEXT	
  _pushString  . . . . . . . . .	L Near	 00000295 _TEXT	
  _FirstEnd  . . . . . . . . . .	L Near	 00000299 _TEXT	
  _SecondEnd . . . . . . . . . .	L Near	 000002A6 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000165 Public STDCALL
  _UserArray . . . . . . . . . .	L Near	 0000004E _TEXT	
  _Writing . . . . . . . . . . .	L Near	 000000C2 _TEXT	
  _ImGonnaJump . . . . . . . . .	L Near	 000000E5 _TEXT	
  _SummaMain . . . . . . . . . .	L Near	 000000E7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AlStorage  . . . . . . . . . . .	DWord	 000002BE _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 -80000000h   
MAX  . . . . . . . . . . . . . .	Number	 00000015h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEN  . . . . . . . . . . . . . .	Number	 0000000Ah   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addNum . . . . . . . . . . . . .	DWord	 00000214 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 00000218 _DATA	
counterino . . . . . . . . . . .	DWord	 000002D1 _DATA	
currentSum . . . . . . . . . . .	Byte	 00000299 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 00000147 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extra1 . . . . . . . . . . . . .	Byte	 0000018D _DATA	
get_prompt . . . . . . . . . . .	Byte	 00000127 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 0000022F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numStore . . . . . . . . . . . .	DWord	 000002C5 _DATA	
num_count  . . . . . . . . . . .	DWord	 000002AF _DATA	
purpose_1  . . . . . . . . . . .	Byte	 00000039 _DATA	
purpose_2  . . . . . . . . . . .	Byte	 000000AA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
retry  . . . . . . . . . . . . .	Byte	 0000021C _DATA	
runningSum . . . . . . . . . . .	DWord	 00000295 _DATA	
spaceComma . . . . . . . . . . .	Byte	 000002C2 _DATA	
strDisplay . . . . . . . . . . .	Byte	 00000254 _DATA	
stringHold . . . . . . . . . . .	Byte	 000002B3 _DATA	
summa  . . . . . . . . . . . . .	Byte	 00000288 _DATA	
theSum . . . . . . . . . . . . .	DWord	 000002C9 _DATA	
trunc8dAvg . . . . . . . . . . .	DWord	 000002CD _DATA	
truncAvg . . . . . . . . . . . .	Byte	 0000026C _DATA	
userInput  . . . . . . . . . . .	Byte	 000001FF _DATA	
usrArray . . . . . . . . . . . .	DWord	 000001D7 _DATA	
welcome_1  . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
